# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @hasRole(role: Role!, action: Action!) on FIELD_DEFINITION

enum Action {
  CREATE_USER
  DELETE_USER
}

enum Role {
  "ADMIN Role"
  ADMIN
  "USER Role"
  USER
}

type Query {
  authenticateUser(params: AuthParams!): UserObject!
}

type Mutation {
  createUser(user: CreateUserInput!): UserObject!
    @hasRole(role: ADMIN, action: CREATE_USER)
  deleteUser(user: DeleteUserInput!): String!
    @hasRole(role: ADMIN, action: DELETE_USER)
}

type User {
  "The user's unique user ID"
  userID: ID!
  "The user's e-mail address"
  email: String!
  "The user's first name"
  firstName: String!
  "The user's last name"
  lastName: String!
  "The user's username"
  userName: String!
}

type UserObject {
  user: User!
}

input CreateUserInput {
  "The user's e-mail address"
  email: String!
  "The user's first name"
  firstName: String!
  "The user's last name"
  lastName: String!
  "The user's username"
  userName: String!
  "The user's password'"
  password: String!
}

input DeleteUserInput {
  "The user's unique user ID"
  userID: ID!
  "The user's e-mail address"
  email: String!
  "The user's first name"
  firstName: String!
  "The user's last name"
  lastName: String!
  "The user's username"
  userName: String!
}
