// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserInput struct {
	// The user's e-mail address
	Email string `json:"email"`
	// The user's first name
	FirstName string `json:"firstName"`
	// The user's last name
	LastName string `json:"lastName"`
	// The user's username
	UserName string `json:"userName"`
	// The user's password'
	Password string `json:"password"`
}

type DeleteUserInput struct {
	// The user's unique user ID
	UserID string `json:"userID"`
	// The user's e-mail address
	Email string `json:"email"`
	// The user's first name
	FirstName string `json:"firstName"`
	// The user's last name
	LastName string `json:"lastName"`
	// The user's username
	UserName string `json:"userName"`
}

type User struct {
	// The user's unique user ID
	UserID string `json:"userID"`
	// The user's e-mail address
	Email string `json:"email"`
	// The user's first name
	FirstName string `json:"firstName"`
	// The user's last name
	LastName string `json:"lastName"`
	// The user's username
	UserName string `json:"userName"`
}

type UserObject struct {
	User *User `json:"user"`
}

type Action string

const (
	ActionCreateUser Action = "CREATE_USER"
	ActionDeleteUser Action = "DELETE_USER"
)

var AllAction = []Action{
	ActionCreateUser,
	ActionDeleteUser,
}

func (e Action) IsValid() bool {
	switch e {
	case ActionCreateUser, ActionDeleteUser:
		return true
	}
	return false
}

func (e Action) String() string {
	return string(e)
}

func (e *Action) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Action(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Action", str)
	}
	return nil
}

func (e Action) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	// ADMIN Role
	RoleAdmin Role = "ADMIN"
	// USER Role
	RoleUser Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
