service:
  name: user-auth-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '>=2.0.0'

plugins:
  - serverless-pseudo-parameters

custom:
  awsAccountId: ${file(./getAccountId.js):getAccountId}
  commonPrefix: ${self:service.name}-${self:provider.stage}-app
  vpc: ${file(./${self:provider.stage}.yml):vpc}

provider:
  name: aws
  runtime: provided.al2
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      role: 'arn:aws:iam::${self:custom.awsAccountId}:role/${self:custom.commonPrefix}-apiGatewayRole'
      roleManagedExternally: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:AddPermission'
        - 'lambda:InvokeFunction'
        - 'lambda:RemovePermission'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*
  stage: ${opt:stage, 'dev'}
  timeout: 10

package:
  exclude:
    - ./**
  individually: true

functions:
  auth: ${file(lambda/auth/function.yml)}