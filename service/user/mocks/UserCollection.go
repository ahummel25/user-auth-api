// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"go.mongodb.org/mongo-driver/v2/mongo/options"
)

// NewMockUserCollection creates a new instance of MockUserCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserCollection {
	mock := &MockUserCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserCollection is an autogenerated mock type for the UserCollection type
type MockUserCollection struct {
	mock.Mock
}

type MockUserCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserCollection) EXPECT() *MockUserCollection_Expecter {
	return &MockUserCollection_Expecter{mock: &_m.Mock}
}

// CountDocuments provides a mock function for the type MockUserCollection
func (_mock *MockUserCollection) CountDocuments(ctx context.Context, filter interface{}, opts ...options.Lister[options.CountOptions]) (int64, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.CountOptions]) (int64, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.CountOptions]) int64); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.CountOptions]) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserCollection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type MockUserCollection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - ctx
//   - filter
//   - opts
func (_e *MockUserCollection_Expecter) CountDocuments(ctx interface{}, filter interface{}, opts ...interface{}) *MockUserCollection_CountDocuments_Call {
	return &MockUserCollection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockUserCollection_CountDocuments_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.CountOptions])) *MockUserCollection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]options.Lister[options.CountOptions])
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCollection_CountDocuments_Call) Return(n int64, err error) *MockUserCollection_CountDocuments_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserCollection_CountDocuments_Call) RunAndReturn(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.CountOptions]) (int64, error)) *MockUserCollection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function for the type MockUserCollection
func (_mock *MockUserCollection) DeleteOne(ctx context.Context, filter interface{}, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) *mongo.DeleteResult); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.DeleteOneOptions]) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserCollection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockUserCollection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx
//   - filter
//   - opts
func (_e *MockUserCollection_Expecter) DeleteOne(ctx interface{}, filter interface{}, opts ...interface{}) *MockUserCollection_DeleteOne_Call {
	return &MockUserCollection_DeleteOne_Call{Call: _e.mock.On("DeleteOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockUserCollection_DeleteOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.DeleteOneOptions])) *MockUserCollection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]options.Lister[options.DeleteOneOptions])
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCollection_DeleteOne_Call) Return(deleteResult *mongo.DeleteResult, err error) *MockUserCollection_DeleteOne_Call {
	_c.Call.Return(deleteResult, err)
	return _c
}

func (_c *MockUserCollection_DeleteOne_Call) RunAndReturn(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error)) *MockUserCollection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockUserCollection
func (_mock *MockUserCollection) FindOne(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOneOptions]) *mongo.SingleResult {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.FindOneOptions]) *mongo.SingleResult); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}
	return r0
}

// MockUserCollection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockUserCollection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx
//   - filter
//   - opts
func (_e *MockUserCollection_Expecter) FindOne(ctx interface{}, filter interface{}, opts ...interface{}) *MockUserCollection_FindOne_Call {
	return &MockUserCollection_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockUserCollection_FindOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOneOptions])) *MockUserCollection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]options.Lister[options.FindOneOptions])
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCollection_FindOne_Call) Return(singleResult *mongo.SingleResult) *MockUserCollection_FindOne_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *MockUserCollection_FindOne_Call) RunAndReturn(run func(ctx context.Context, filter interface{}, opts ...options.Lister[options.FindOneOptions]) *mongo.SingleResult) *MockUserCollection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockUserCollection
func (_mock *MockUserCollection) InsertOne(ctx context.Context, document interface{}, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, document, opts)
	} else {
		tmpRet = _mock.Called(ctx, document)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error)); ok {
		return returnFunc(ctx, document, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) *mongo.InsertOneResult); ok {
		r0 = returnFunc(ctx, document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}, ...options.Lister[options.InsertOneOptions]) error); ok {
		r1 = returnFunc(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserCollection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockUserCollection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx
//   - document
//   - opts
func (_e *MockUserCollection_Expecter) InsertOne(ctx interface{}, document interface{}, opts ...interface{}) *MockUserCollection_InsertOne_Call {
	return &MockUserCollection_InsertOne_Call{Call: _e.mock.On("InsertOne",
		append([]interface{}{ctx, document}, opts...)...)}
}

func (_c *MockUserCollection_InsertOne_Call) Run(run func(ctx context.Context, document interface{}, opts ...options.Lister[options.InsertOneOptions])) *MockUserCollection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]options.Lister[options.InsertOneOptions])
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCollection_InsertOne_Call) Return(insertOneResult *mongo.InsertOneResult, err error) *MockUserCollection_InsertOne_Call {
	_c.Call.Return(insertOneResult, err)
	return _c
}

func (_c *MockUserCollection_InsertOne_Call) RunAndReturn(run func(ctx context.Context, document interface{}, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error)) *MockUserCollection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockUserCollection
func (_mock *MockUserCollection) UpdateOne(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, update, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter, update)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)); ok {
		return returnFunc(ctx, filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) *mongo.UpdateResult); ok {
		r0 = returnFunc(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) error); ok {
		r1 = returnFunc(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockUserCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx
//   - filter
//   - update
//   - opts
func (_e *MockUserCollection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockUserCollection_UpdateOne_Call {
	return &MockUserCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockUserCollection_UpdateOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions])) *MockUserCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]options.Lister[options.UpdateOneOptions])
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockUserCollection_UpdateOne_Call) Return(updateResult *mongo.UpdateResult, err error) *MockUserCollection_UpdateOne_Call {
	_c.Call.Return(updateResult, err)
	return _c
}

func (_c *MockUserCollection_UpdateOne_Call) RunAndReturn(run func(ctx context.Context, filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)) *MockUserCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}
