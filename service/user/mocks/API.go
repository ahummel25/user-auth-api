// Code generated by mockery v2.43.2. DO NOT EDIT.

package user

import (
	context "context"

	model "github.com/ahummel25/user-auth-api/graphql/model"
	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

type API_Expecter struct {
	mock *mock.Mock
}

func (_m *API) EXPECT() *API_Expecter {
	return &API_Expecter{mock: &_m.Mock}
}

// AuthenticateUser provides a mock function with given fields: ctx, usernameOrEmail, password
func (_m *API) AuthenticateUser(ctx context.Context, usernameOrEmail string, password string) (*model.UserObject, error) {
	ret := _m.Called(ctx, usernameOrEmail, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 *model.UserObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.UserObject, error)); ok {
		return rf(ctx, usernameOrEmail, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.UserObject); ok {
		r0 = rf(ctx, usernameOrEmail, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, usernameOrEmail, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type API_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - usernameOrEmail string
//   - password string
func (_e *API_Expecter) AuthenticateUser(ctx interface{}, usernameOrEmail interface{}, password interface{}) *API_AuthenticateUser_Call {
	return &API_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", ctx, usernameOrEmail, password)}
}

func (_c *API_AuthenticateUser_Call) Run(run func(ctx context.Context, usernameOrEmail string, password string)) *API_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *API_AuthenticateUser_Call) Return(_a0 *model.UserObject, _a1 error) *API_AuthenticateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_AuthenticateUser_Call) RunAndReturn(run func(context.Context, string, string) (*model.UserObject, error)) *API_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, params
func (_m *API) CreateUser(ctx context.Context, params model.NewUserInput) (*model.UserObject, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.UserObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NewUserInput) (*model.UserObject, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.NewUserInput) *model.UserObject); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.NewUserInput) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type API_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.NewUserInput
func (_e *API_Expecter) CreateUser(ctx interface{}, params interface{}) *API_CreateUser_Call {
	return &API_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, params)}
}

func (_c *API_CreateUser_Call) Run(run func(ctx context.Context, params model.NewUserInput)) *API_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.NewUserInput))
	})
	return _c
}

func (_c *API_CreateUser_Call) Return(_a0 *model.UserObject, _a1 error) *API_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_CreateUser_Call) RunAndReturn(run func(context.Context, model.NewUserInput) (*model.UserObject, error)) *API_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *API) DeleteUser(ctx context.Context, userID string) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type API_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *API_Expecter) DeleteUser(ctx interface{}, userID interface{}) *API_DeleteUser_Call {
	return &API_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *API_DeleteUser_Call) Run(run func(ctx context.Context, userID string)) *API_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_DeleteUser_Call) Return(_a0 bool, _a1 error) *API_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_DeleteUser_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *API_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
